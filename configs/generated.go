// Code generated by internal/config/generate.
// DO NOT EDIT.
//
// (c) Cartesi and individual authors (see AUTHORS)
// SPDX-License-Identifier: Apache-2.0 (see LICENSE)

package configs

import (
	"fmt"

	"github.com/spf13/viper"
)

var ErrNotDefined = fmt.Errorf("variable not defined")

func init() {
	// Automatically bind environment variables.
	viper.AutomaticEnv()
}

const (
	SHOAL_ADMIN_ADDRESS         = "SHOAL_ADMIN_ADDRESS"
	SHOAL_ADMIN_ADDRESS_TEST    = "SHOAL_ADMIN_ADDRESS_TEST"
	SHOAL_VERIFIER_ADDRESS      = "SHOAL_VERIFIER_ADDRESS"
	SHOAL_VERIFIER_ADDRESS_TEST = "SHOAL_VERIFIER_ADDRESS_TEST"
)

func SetDefaults() {
	// Set defaults based on the TOML definitions.

	viper.SetDefault(SHOAL_ADMIN_ADDRESS, "0xd554153658e8d466428fa48487f5aba18df5e628")

	viper.SetDefault(SHOAL_ADMIN_ADDRESS_TEST, "0x976EA74026E726554dB657fA54763abd0C3a0aa9")

	viper.SetDefault(SHOAL_VERIFIER_ADDRESS, "0x66890C637A441b3A66E4F9377eE705bD4Ced506c")

	viper.SetDefault(SHOAL_VERIFIER_ADDRESS_TEST, "0x0000000000000000000000000000000000000025")

}

// RollupConfig holds configuration values for the rollup.
type RollupConfig struct {

	// Address of the admin user
	ShoalAdminAddress Address `mapstructure:"SHOAL_ADMIN_ADDRESS"`

	// Address of the admin user
	ShoalAdminAddressTest Address `mapstructure:"SHOAL_ADMIN_ADDRESS_TEST"`

	// Address of the verifier user, who can verify the social accounts
	ShoalVerifierAddress Address `mapstructure:"SHOAL_VERIFIER_ADDRESS"`

	// Address of the verifier user, who can verify the social accounts
	ShoalVerifierAddressTest Address `mapstructure:"SHOAL_VERIFIER_ADDRESS_TEST"`
}

// LoadRollupConfig reads configuration from environment variables, a config file, and defaults.
// Priority: command line flags > environment variables > config file > defaults.
func LoadRollupConfig() (*RollupConfig, error) {
	SetDefaults()

	// Load config file if specified via --config flag.
	if cfgFile := viper.GetString("config"); cfgFile != "" {
		viper.SetConfigFile(cfgFile)
		if err := viper.ReadInConfig(); err != nil {
			return nil, fmt.Errorf("error reading config file: %w", err)
		}
	}

	var cfg RollupConfig
	var err error

	cfg.ShoalAdminAddress, err = GetShoalAdminAddress()
	if err != nil && err != ErrNotDefined {
		return nil, fmt.Errorf("failed to get SHOAL_ADMIN_ADDRESS: %w", err)
	} else if err == ErrNotDefined {
		return nil, fmt.Errorf("SHOAL_ADMIN_ADDRESS is required for the rollup service: %w", err)
	}

	cfg.ShoalAdminAddressTest, err = GetShoalAdminAddressTest()
	if err != nil && err != ErrNotDefined {
		return nil, fmt.Errorf("failed to get SHOAL_ADMIN_ADDRESS_TEST: %w", err)
	} else if err == ErrNotDefined {
		return nil, fmt.Errorf("SHOAL_ADMIN_ADDRESS_TEST is required for the rollup service: %w", err)
	}

	cfg.ShoalVerifierAddress, err = GetShoalVerifierAddress()
	if err != nil && err != ErrNotDefined {
		return nil, fmt.Errorf("failed to get SHOAL_VERIFIER_ADDRESS: %w", err)
	} else if err == ErrNotDefined {
		return nil, fmt.Errorf("SHOAL_VERIFIER_ADDRESS is required for the rollup service: %w", err)
	}

	cfg.ShoalVerifierAddressTest, err = GetShoalVerifierAddressTest()
	if err != nil && err != ErrNotDefined {
		return nil, fmt.Errorf("failed to get SHOAL_VERIFIER_ADDRESS_TEST: %w", err)
	} else if err == ErrNotDefined {
		return nil, fmt.Errorf("SHOAL_VERIFIER_ADDRESS_TEST is required for the rollup service: %w", err)
	}

	return &cfg, nil
}

// GetShoalAdminAddress returns the value for the environment variable SHOAL_ADMIN_ADDRESS.
func GetShoalAdminAddress() (Address, error) {
	s := viper.GetString(SHOAL_ADMIN_ADDRESS)
	if s != "" {
		v, err := toAddress(s)
		if err != nil {
			return v, fmt.Errorf("failed to parse %s: %w", SHOAL_ADMIN_ADDRESS, err)
		}
		return v, nil
	}
	return notDefinedAddress(), fmt.Errorf("%s: %w", SHOAL_ADMIN_ADDRESS, ErrNotDefined)
}

// GetShoalAdminAddressTest returns the value for the environment variable SHOAL_ADMIN_ADDRESS_TEST.
func GetShoalAdminAddressTest() (Address, error) {
	s := viper.GetString(SHOAL_ADMIN_ADDRESS_TEST)
	if s != "" {
		v, err := toAddress(s)
		if err != nil {
			return v, fmt.Errorf("failed to parse %s: %w", SHOAL_ADMIN_ADDRESS_TEST, err)
		}
		return v, nil
	}
	return notDefinedAddress(), fmt.Errorf("%s: %w", SHOAL_ADMIN_ADDRESS_TEST, ErrNotDefined)
}

// GetShoalVerifierAddress returns the value for the environment variable SHOAL_VERIFIER_ADDRESS.
func GetShoalVerifierAddress() (Address, error) {
	s := viper.GetString(SHOAL_VERIFIER_ADDRESS)
	if s != "" {
		v, err := toAddress(s)
		if err != nil {
			return v, fmt.Errorf("failed to parse %s: %w", SHOAL_VERIFIER_ADDRESS, err)
		}
		return v, nil
	}
	return notDefinedAddress(), fmt.Errorf("%s: %w", SHOAL_VERIFIER_ADDRESS, ErrNotDefined)
}

// GetShoalVerifierAddressTest returns the value for the environment variable SHOAL_VERIFIER_ADDRESS_TEST.
func GetShoalVerifierAddressTest() (Address, error) {
	s := viper.GetString(SHOAL_VERIFIER_ADDRESS_TEST)
	if s != "" {
		v, err := toAddress(s)
		if err != nil {
			return v, fmt.Errorf("failed to parse %s: %w", SHOAL_VERIFIER_ADDRESS_TEST, err)
		}
		return v, nil
	}
	return notDefinedAddress(), fmt.Errorf("%s: %w", SHOAL_VERIFIER_ADDRESS_TEST, ErrNotDefined)
}
